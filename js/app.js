// Generated by CoffeeScript 1.4.0
(function() {
  var SoundManager;

  SoundManager = (function() {

    SoundManager.prototype.SOUND_BASE = 'sounds/';

    SoundManager.prototype.options = {
      volume: 0.75,
      target: '#text'
    };

    function SoundManager() {
      this.loadAudioFiles();
      this.setupDom();
      this.keystrokeCount = 0;
    }

    SoundManager.prototype.loadAudioFiles = function() {
      var audioObj, bufferSize, file, i, name, sound, _ref, _results;
      this.sounds = {
        standard: {
          timeout: 0,
          files: ["k1p.wav", "k2p.wav", "k3p.wav", "k4p.wav"]
        },
        space: {
          timeout: 250,
          files: ["spacebar.wav"]
        },
        enter: {
          timeout: 700,
          files: ["returncarriage.wav"]
        },
        backspace: {
          timeout: 200,
          files: ["backspace.wav"]
        }
      };
      bufferSize = 5;
      _ref = this.sounds;
      _results = [];
      for (name in _ref) {
        sound = _ref[name];
        this.sounds[name].sounds = [];
        _results.push((function() {
          var _i, _ref1, _results1;
          _results1 = [];
          for (i = _i = 0, _ref1 = bufferSize - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
            _results1.push((function() {
              var _j, _len, _ref2, _results2;
              _ref2 = sound.files;
              _results2 = [];
              for (_j = 0, _len = _ref2.length; _j < _len; _j++) {
                file = _ref2[_j];
                audioObj = new Audio(this.SOUND_BASE + file);
                audioObj.volume = this.options.volume;
                this.sounds[name].sounds.push(audioObj);
                _results2.push(this.sounds[name].lastPlayed = 0);
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    SoundManager.prototype._withinRange = function(sample, min, max) {
      return sample > min && sample < max;
    };

    SoundManager.prototype._playSound = function(soundName) {
      var playable, sound, sounds, time;
      sound = this.sounds[soundName];
      time = new Date().getTime();
      if (!(sound.timeLastPlayed != null) || time - sound.timeLastPlayed > sound.timeout) {
        sounds = sound.sounds;
        playable = sounds[this.keystrokeCount % sounds.length];
        playable.play();
        sound.timeLastPlayed = time;
        return true;
      }
      return false;
    };

    SoundManager.prototype.setupDom = function() {
      var $txt,
        _this = this;
      $txt = $(this.options.target);
      $txt.on('keydown', function(e) {
        var played;
        _this.keystrokeCount++;
        if (_this._withinRange(e.keyCode, 48, 90) || _this._withinRange(e.keyCode, 186, 222)) {
          return played = _this._playSound('standard');
        } else {
          switch (e.keyCode) {
            case 13:
              played = _this._playSound('enter');
              break;
            case 32:
              played = _this._playSound('space');
              break;
            case 8:
              played = _this._playSound('backspace');
          }
          if (!played) {
            return e.preventDefault();
          }
        }
      });
      $(document).on('click', function() {
        return $txt.focus();
      });
      return $txt.focus();
    };

    return SoundManager;

  })();

  new SoundManager();

}).call(this);
