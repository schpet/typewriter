// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var $txt, KeyTools, Paper, SoundManager, animate, camera, geometry, init, material, mesh, paper, renderer, scene, sounds, texture,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.keys = {
    ENTER: 13,
    SPACE: 32,
    BACKSPACE: 8
  };

  KeyTools = (function() {

    function KeyTools() {}

    KeyTools.normal = function(keyCode) {
      return KeyTools._withinRange(keyCode, 48, 90) || KeyTools._withinRange(keyCode, 186, 222);
    };

    KeyTools._withinRange = function(sample, min, max) {
      return sample >= min && sample <= max;
    };

    return KeyTools;

  }).call(this);

  SoundManager = (function() {

    SoundManager.prototype.SOUND_BASE = 'sounds/';

    SoundManager.prototype.options = {
      volume: 0.75
    };

    function SoundManager() {
      this.loadAudioFiles();
      this.setupDom();
      this.keystrokeCount = 0;
    }

    SoundManager.prototype.loadAudioFiles = function() {
      var audioObj, bufferSize, file, i, name, sound, _ref, _results;
      this.sounds = {
        standard: {
          timeout: 0,
          files: ["k1p.wav", "k2p.wav", "k3p.wav", "k4p.wav"]
        },
        space: {
          timeout: 250,
          files: ["spacebar.wav"]
        },
        enter: {
          timeout: 700,
          files: ["returncarriage.wav"]
        },
        backspace: {
          timeout: 200,
          files: ["backspace.wav"]
        }
      };
      bufferSize = 5;
      _ref = this.sounds;
      _results = [];
      for (name in _ref) {
        sound = _ref[name];
        this.sounds[name].sounds = [];
        _results.push((function() {
          var _i, _ref1, _results1;
          _results1 = [];
          for (i = _i = 0, _ref1 = bufferSize - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
            _results1.push((function() {
              var _j, _len, _ref2, _results2;
              _ref2 = sound.files;
              _results2 = [];
              for (_j = 0, _len = _ref2.length; _j < _len; _j++) {
                file = _ref2[_j];
                audioObj = new Audio(this.SOUND_BASE + file);
                audioObj.volume = this.options.volume;
                this.sounds[name].sounds.push(audioObj);
                _results2.push(this.sounds[name].lastPlayed = 0);
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    SoundManager.prototype._withinRange = function(sample, min, max) {
      return sample > min && sample < max;
    };

    SoundManager.prototype._playSound = function(soundName) {
      var playable, sound, sounds, time;
      sound = this.sounds[soundName];
      time = new Date().getTime();
      if (!(sound.timeLastPlayed != null) || time - sound.timeLastPlayed > sound.timeout) {
        sounds = sound.sounds;
        playable = sounds[this.keystrokeCount % sounds.length];
        playable.play();
        sound.timeLastPlayed = time;
        return true;
      }
      return false;
    };

    SoundManager.prototype.setupDom = function() {
      var _this = this;
      return $(document).on('keydown', function(e) {
        var played;
        if (e.metaKey || e.ctrlKey || e.altKey) {
          return;
        }
        _this.keystrokeCount++;
        if (KeyTools.normal(e.keyCode)) {
          played = _this._playSound('standard');
        } else {
          switch (e.keyCode) {
            case keys.ENTER:
              played = _this._playSound('enter');
              break;
            case keys.SPACE:
              played = _this._playSound('space');
              break;
            case keys.BACKSPACE:
              played = _this._playSound('backspace');
          }
        }
        return true;
      });
    };

    return SoundManager;

  })();

  Paper = (function() {

    Paper.prototype.options = {
      maxColumns: 32,
      maxRows: 32,
      charWidth: 15,
      lineHeight: 30
    };

    function Paper(containerId, options) {
      var container;
      if (options == null) {
        options = {};
      }
      this.printCharacter = __bind(this.printCharacter, this);

      this.adjustCol = __bind(this.adjustCol, this);

      this.adjustRow = __bind(this.adjustRow, this);

      this.adjustPosition = __bind(this.adjustPosition, this);

      container = document.getElementById(containerId);
      this.canvas = document.createElement('canvas');
      this.canvas.width = this.options.maxColumns * this.options.charWidth;
      this.canvas.height = this.options.maxRows * this.options.lineHeight;
      container.appendChild(this.canvas);
      this.$canvas = $(this.canvas);
      this.ctx = this.canvas.getContext('2d');
      this.ctx.fillStyle = "rgba(255,255,204, 0.9)";
      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      this.ctx.fillStyle = "rgba(55, 80, 0, 0.7)";
      this.ctx.font = "20px monospace";
      this.col = 0;
      this.row = 0;
      this.dontPrint = false;
      $(document).on('keydown', this.adjustPosition);
      $(document).on('keypress', this.printCharacter);
    }

    Paper.prototype.adjustPosition = function(e) {
      if (e.metaKey || e.ctrlKey || e.altKey) {
        return;
      }
      switch (e.keyCode) {
        case keys.ENTER:
          this.adjustRow(1);
          break;
        case keys.SPACE:
          this.adjustCol(1);
          break;
        case keys.BACKSPACE:
          this.adjustCol(-1);
          break;
        default:
          if (KeyTools.normal(e.keyCode)) {
            this.adjustCol(1);
          }
      }
      return true;
    };

    Paper.prototype.adjustRow = function(value) {
      this.row += value;
      this.col = 0;
      return this.$canvas.css('-webkit-transform', "translate(0," + (-this.row * this.options.lineHeight) + "px)");
    };

    Paper.prototype.adjustCol = function(value) {
      var adjusted;
      adjusted = this.col + value;
      if (adjusted < 0) {
        this.adjustRow(-1);
        return;
      }
      if (adjusted > this.options.maxColumns) {
        this.dontPrint = true;
        return;
      }
      if (this.dontPrint) {
        this.dontPrint = false;
      }
      this.col = adjusted;
      this.left -= value * this.options.charWidth;
      return this.$canvas.css('-webkit-transform', "translate(" + (-this.col * this.options.charWidth) + "px," + (-this.row * this.options.lineHeight) + "px)");
    };

    Paper.prototype.printCharacter = function(e) {
      var rotation, rotationRange, texture;
      if (this.dontPrint) {
        return;
      }
      this.ctx.save();
      this.ctx.translate(this.options.charWidth * this.col, this.options.lineHeight * this.row + this.options.lineHeight);
      rotationRange = 0.12;
      rotation = -(rotationRange / 2) + Math.random() * rotationRange;
      this.ctx.rotate(rotation);
      this.ctx.fillText(String.fromCharCode(e.charCode), 0, 0);
      this.ctx.restore();
      texture = new THREE.Texture(this.canvas);
      texture.needsUpdate = true;
      mesh.material.map = texture;
      mesh.material.needsUpdate = true;
      return true;
    };

    return Paper;

  })();

  $txt = $('#text');

  $(document).on('click', function() {
    return $txt.focus();
  });

  $txt.focus();

  camera = void 0;

  scene = void 0;

  renderer = void 0;

  geometry = void 0;

  material = void 0;

  mesh = void 0;

  init = function(texture) {
    var size;
    size = {
      width: window.innerWidth / 2,
      height: window.innerHeight
    };
    camera = new THREE.PerspectiveCamera(75, size.width / size.height, 1, 10000);
    camera.position.z = 500;
    scene = new THREE.Scene();
    geometry = new THREE.CylinderGeometry(80, 80, 400, 25, 1, true);
    material = new THREE.MeshBasicMaterial({
      map: texture
    });
    mesh = new THREE.Mesh(geometry, material);
    mesh.doubleSided = true;
    scene.add(mesh);
    renderer = new THREE.WebGLRenderer({
      antialias: true
    });
    renderer.setSize(size.width, size.height);
    return document.body.appendChild(renderer.domElement);
  };

  animate = function() {
    requestAnimationFrame(animate);
    mesh.rotation.y -= 0.01;
    return renderer.render(scene, camera);
  };

  sounds = new SoundManager();

  paper = new Paper('paper-container');

  texture = new THREE.Texture(paper.canvas);

  texture.needsUpdate = true;

  init(texture);

  animate();

}).call(this);
